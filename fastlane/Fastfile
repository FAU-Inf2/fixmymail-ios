# Customise this file, documentation can be found here:
# https://github.com/KrauseFx/fastlane/tree/master/docs
# All available actions: https://github.com/KrauseFx/fastlane/blob/master/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# By default, fastlane will send which actions are used
# No personal data is shared, more information on https://github.com/fastlane/enhancer
# Uncomment the following line to opt out
# opt_out_usage

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version

fastlane_version "1.3.2"

default_platform :ios

platform :ios do

  before_all do |lane|
    ENV["HIPCHAT_API_VERSION"] = "1"
    #["FL_HIPCHAT_SHOW_ICON"] = false
    if ENV["HIPCHAT_API_TOKEN"] && lane.to_s != 'clean'
      hipchatnoicon(
        message: "Running lane: " + lane.to_s,
        channel: "Fix my mail",
        show_icon: false
      )
    end
  end

  desc "Clean project with xctool"
  lane :clean do
    if ENV["HIPCHAT_API_TOKEN"]
      commit_sha = `git rev-parse HEAD`.strip;
      commit_author = `git --no-pager show -s --format='%an <%ae>' #{commit_sha}`.strip
      commit_author = CGI.escapeHTML(commit_author)

      hipchatnoicon(
        message: "Start build for commit <a href='https://github.com/FAU-Inf2/fixmymail-ios/commit/#{commit_sha}'>#{commit_sha[0..8]}</a> by #{commit_author}.",
        channel: "Fix my mail",
        show_icon: false
      )
    end

    xctool "-project FixMyMail.xcodeproj \
        -scheme 'FixMyMail' \
        -configuration Release \
        -sdk iphonesimulator \
        clean"
  end

  desc "Build project with xctool"
  lane :build do
    carthageverbose(
      verbose: true
    )
    xctool "-project FixMyMail.xcodeproj \
        -scheme 'FixMyMail' \
        -configuration Release \
        -sdk iphonesimulator \
        build"
  end

  desc "Run tests for project with xctool"
  lane :test do
    xctool "-project FixMyMail.xcodeproj \
        -scheme 'FixMyMail' \
        -configuration Release \
        -sdk iphonesimulator \
        test"
  end

  desc "Build and deploy the ipa file"
  lane :deploy do
    ipa(
      scheme: "FixMyMail"
    )
    sh "sh deploy.sh"
    if ENV["HIPCHAT_API_TOKEN"]
      commit_sha = `git rev-parse HEAD`.strip;

      hipchatnoicon(
        message: "Build for commit <a href='https://github.com/FAU-Inf2/fixmymail-ios/commit/#{commit_sha}'>#{commit_sha[0..8]}</a> successful!",
        channel: "Fix my mail",
        success: true,
        show_icon: false
      )
    end
  end

  after_all do |lane|
    # This block is called, only if the executed lane was successful
    sh "sh uploadLog.sh"
  end

  error do |lane, exception|
    sh "sh uploadLog.sh"
    if ENV["HIPCHAT_API_TOKEN"]
      commit_sha = `git rev-parse HEAD`.strip;
      
      hipchatnoicon(
        message: "Build for commit <a href='https://github.com/FAU-Inf2/fixmymail-ios/commit/#{commit_sha}'>#{commit_sha[0..8]}</a> failed in lane: " + lane.to_s,
        #exception.message TODO cut to 1000 chars
        channel: "Fix my mail",
        success: false,
        show_icon: false
      )
    end
  end
end